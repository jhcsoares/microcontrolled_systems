RANDOM_LIST EQU 0x20000400
SORTED_LIST EQU 0x20000500
	
Start  
 	MOV R0, #0X0400
	MOVT R0, #0X2000
	
	MOV R1, #3
	STRB R1, [R0], #1
	MOV R1, #244
	STRB R1, [R0], #1
	MOV R1, #14
	STRB R1, [R0], #1
	MOV R1, #233
	STRB R1, [R0], #1
	MOV R1, #1
	STRB R1, [R0], #1
	MOV R1, #6
	STRB R1, [R0], #1
	MOV R1, #9
	STRB R1, [R0], #1
	MOV R1, #18
	STRB R1, [R0], #1
	MOV R1, #13
	STRB R1, [R0], #1
	MOV R1, #254
	STRB R1, [R0], #1
	MOV R1, #21
	STRB R1, [R0], #1
	MOV R1, #34
	STRB R1, [R0], #1
	MOV R1, #2
	STRB R1, [R0], #1
	MOV R1, #67
	STRB R1, [R0], #1
	MOV R1, #135
	STRB R1, [R0], #1
	MOV R1, #8
	STRB R1, [R0], #1
	MOV R1, #89
	STRB R1, [R0], #1
	MOV R1, #43
	STRB R1, [R0], #1
	MOV R1, #5
	STRB R1, [R0], #1
	MOV R1, #105
	STRB R1, [R0], #1
	MOV R1, #144
	STRB R1, [R0], #1
	MOV R1, #201
	STRB R1, [R0], #1
	MOV R1, #55
	STRB R1, [R0], #1
	
	MOV R0, #0X0400 ;RANDOM_LIST INFERIOR LIMIT
	MOVT R0, #0X2000 ;RANDOM_LIST INFERIOR LIMIT
	
	MOV R2, #0X0416 ;RANDOM_LIST SUPERIOR LIMIT
	MOVT R2, #0X2000 ;RANDOM_LIST SUPERIOR LIMIT
	
	MOV R1, #0X0500 ;SORTED_LIST SUPERIOR LIMIT
	MOVT R1, #0X2000 ;SORTED_LIST SUPERIOR LIMIT
 
FIBONACCI_SETUP
	LDRB R6, [R0]	;VALUE POINTED BY R0 (RANDOM_LIST)
	
	;COMPARING R6 WITH 0 OR 1
	CMP R6, #0
	IT EQ
		STRBEQ R6, [R1], #1
	CMP R6, #1
	IT EQ
		STRBEQ R6, [R1], #1
	
	MOV R3, #1
	MOV R4, #1
	
FIBONACCI_ANALYSIS
	ADD R5, R4, R3 
	
	MOV R3, R4 ;SHIFTING VALUES
	MOV R4, R5 ;SHIFTING VALUES
	
	CMP R5, R6 ;COMPARING CURRENT VALUE IN RAM WITH CALCULATED FIBONACCI VALUE
	BLO FIBONACCI_ANALYSIS ;WHILE CURRENT VALUE IS LOWER THAN A CALCULATED FIBONACCI VALUE GO TO FIBONACCI_ANALYSIS
	CMP R5, R6 ;ELSE IF IT EQUALS TO A CALCULATED FIBONACCI VALUE, WRITE IT IN RAM
	IT EQ
		STRBEQ R6, [R1], #1

	;R0++
	ADD R0, R0, #1
	CMP R0, R2

	;ONCE IT REACHES 0X20000416, IT GOES TO INSERTION_SORT
	BLS FIBONACCI_SETUP

	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;INSERTION_SORT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
	
	MOV R2, #0X0500 ;R2=0
	MOVT R2, #0X2000 ;R2=0
	
	;THE PREVIOUS VALUE CALCULATED IN FIBONACCI ROUTINE FOR R1 IS EQUALS THE SUPERIOR LIMIT OF THE SORTED VECTOR
	;MOV R1, #0X0516 ;R1=SIZE
	;MOVT R1, #0X2000 ;R1=SIZE
	
	MOV R0, #0X0500 ;R0=I
	MOVT R0, #0X2000 ;R0=I
	
INSERTION_SORT_SETUP
	ADD R0, R0, #1 ;R0=I++
	CMP R0, R1
	BHS FINAL
	MOV R3, R0 ;R3=CURRENT_INDEX
	
INSERTION_SORT
	CMP R3, R2
	BLS INSERTION_SORT_SETUP ;IF(RAM[CURRENT_INDEX]>0)
	
	LDRB R4, [R3] ;R4=RAM[CURRENT_INDEX]
	SUB R5, R3, #1; R5=CURRENT_INDEX-1
	LDRB R6, [R5] ;R6=RAM[CURRENT_INDEX-1]
	CMP R4, R6 ;IF(RAM[CURRENT_INDEX]<RAM[CURRENT_INDEX-1]
	BHS INSERTION_SORT_SETUP

INSERTION_SORT_SWAP
	STRB R4, [R5]
	STRB R6, [R3]
	SUB R3, R3, #1
	
	B INSERTION_SORT

FINAL
	NOP
  ALIGN                          
  END                    
